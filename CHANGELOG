0.6.0 (16/1/24)
- First changelog entry!
- Added docs for EVNDistanceSensor and EVNCompassSensor

-- Features -- 
- EVNDistanceSensor added
- EVNMagSensor has been renamed to EVNCompassSensor
- Compatiibility with QMC5883L added to EVNCompassSensor
- EVNMotor now has functions to move to absolute position (not just relative position), and reset the encoder's absolute position to 0.

-- Bugfixes --
- Dependencies added (will be removed when published on Arduino's Library Manager)
- Fixed bug with EVNPortSelector, where port 1 should be selected at startup, but no "select port 1" I2C commands were actually sent.
- Rectified some math in EVNMotor such that any variables labelled PPR (pulse per revolution) actually reflect real-world motor encoder PPR



0.6.1 (17/1/24)
- Put changelog in correct folder

-- Features -- 
- Modified settings for VL53L0X for greater range (1.8m)

-- Bugfixes --
- Fixed bug to allow for EVNDistanceSensor to work on I2C ports 9-16



0.7.0 (04/02/24)
- Removed RPi_PICO_TimerInterrupt dependency and replaced with C++ SDK code
- To be added soon: more docs and examples

-- Features --
- Added libraries for EVNBluetooth and EVNBattery (using BQ25887 IC on V1.4 boards onwards)
- Added accel and decel settings to EVNMotor, along with functions to edit PPR, max RPM, and PID controls

-- Bugfixes --
- Fixed bug in EVNDisplay::begin() making it fail to start
- Fixed bug in EVNPortSelector (helper for EVNAlpha) to allow for I2C clock speeds over 100kHz



0.7.1 (28/02/24)
This is meant to be a stable release for current pre-release users, until the EVNMotor rewrite and drivebase classes with motor sync are released

-- Features --
- Added a temporary version of EVNDrivebase and EVNOmniDrivebase (no motor sync yet!)
- Minor doc corrections

-- Bugfixes --
- Fixed many bugs in EVNMotor including a stray debug print
- Fixed a bug in EVNButton causing non-default settings to fail (stuck on defaults)
- Higher I2C frequencies now supported by EVN Alpha object! (Tested at 400kHz)